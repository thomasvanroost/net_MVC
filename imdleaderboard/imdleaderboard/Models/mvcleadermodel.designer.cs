#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace imdleaderboard.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class mvcleadermodelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertSkillPerUser(SkillPerUser instance);
    partial void UpdateSkillPerUser(SkillPerUser instance);
    partial void DeleteSkillPerUser(SkillPerUser instance);
    #endregion
		
		public mvcleadermodelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public mvcleadermodelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvcleadermodelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvcleadermodelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvcleadermodelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<SkillPerUser> SkillPerUsers
		{
			get
			{
				return this.GetTable<SkillPerUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="IMM1094.MVCUsers")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<SkillPerUser> _SkillPerUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public User()
		{
			this._SkillPerUsers = new EntitySet<SkillPerUser>(new Action<SkillPerUser>(this.attach_SkillPerUsers), new Action<SkillPerUser>(this.detach_SkillPerUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCUser_MVCSkillsPerUser", Storage="_SkillPerUsers", ThisKey="id", OtherKey="fk_user_id")]
		public EntitySet<SkillPerUser> SkillPerUsers
		{
			get
			{
				return this._SkillPerUsers;
			}
			set
			{
				this._SkillPerUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SkillPerUsers(SkillPerUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SkillPerUsers(SkillPerUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="IMM1094.MVCSkills")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _skill;
		
		private EntitySet<SkillPerUser> _SkillPerUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnskillChanging(string value);
    partial void OnskillChanged();
    #endregion
		
		public Skill()
		{
			this._SkillPerUsers = new EntitySet<SkillPerUser>(new Action<SkillPerUser>(this.attach_SkillPerUsers), new Action<SkillPerUser>(this.detach_SkillPerUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_skill", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string skill
		{
			get
			{
				return this._skill;
			}
			set
			{
				if ((this._skill != value))
				{
					this.OnskillChanging(value);
					this.SendPropertyChanging();
					this._skill = value;
					this.SendPropertyChanged("skill");
					this.OnskillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCSkill_MVCSkillsPerUser", Storage="_SkillPerUsers", ThisKey="id", OtherKey="fk_skill_id")]
		public EntitySet<SkillPerUser> SkillPerUsers
		{
			get
			{
				return this._SkillPerUsers;
			}
			set
			{
				this._SkillPerUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SkillPerUsers(SkillPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_SkillPerUsers(SkillPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="IMM1094.MVCSkillsPerUser")]
	public partial class SkillPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _fk_user_id;
		
		private int _fk_skill_id;
		
		private int _level;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfk_user_idChanging(int value);
    partial void Onfk_user_idChanged();
    partial void Onfk_skill_idChanging(int value);
    partial void Onfk_skill_idChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    #endregion
		
		public SkillPerUser()
		{
			this._Skill = default(EntityRef<Skill>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user_id", DbType="Int NOT NULL")]
		public int fk_user_id
		{
			get
			{
				return this._fk_user_id;
			}
			set
			{
				if ((this._fk_user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_user_idChanging(value);
					this.SendPropertyChanging();
					this._fk_user_id = value;
					this.SendPropertyChanged("fk_user_id");
					this.Onfk_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_skill_id", DbType="Int NOT NULL")]
		public int fk_skill_id
		{
			get
			{
				return this._fk_skill_id;
			}
			set
			{
				if ((this._fk_skill_id != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_skill_idChanging(value);
					this.SendPropertyChanging();
					this._fk_skill_id = value;
					this.SendPropertyChanged("fk_skill_id");
					this.Onfk_skill_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCSkill_MVCSkillsPerUser", Storage="_Skill", ThisKey="fk_skill_id", OtherKey="id", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.SkillPerUsers.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.SkillPerUsers.Add(this);
						this._fk_skill_id = value.id;
					}
					else
					{
						this._fk_skill_id = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCUser_MVCSkillsPerUser", Storage="_User", ThisKey="fk_user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SkillPerUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SkillPerUsers.Add(this);
						this._fk_user_id = value.id;
					}
					else
					{
						this._fk_user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
